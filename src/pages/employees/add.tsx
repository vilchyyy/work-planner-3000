import { Role } from "@prisma/client";
import type { NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { z } from "zod";
import Form from "../../components/Form/Form";
import Layout from "../../components/Layout";
import { api } from "../../utils/api";

export const addEmployeeValidationSchema = z.object({
    name: z.string().min(2).max(20) ,
    email: z.string().email().max(30),
    role: z.enum([Role.ADMIN, Role.USER, Role.SUPER]),
})

const AddEmployee: NextPage = () => {

    const { data: session, status } = useSession();
    console.log(session, status)
    const mutation = api.users.createUser.useMutation()

    const handleSubmit = (data: z.infer<typeof addEmployeeValidationSchema> ) => {
        mutation.mutate(data)
        if (mutation.isSuccess) {
            console.log("Success!")
        }
        if (mutation.error) {
            console.log(mutation.error)
        }
    }

    if (status === "loading") {
        return <div>Loading...</div>
    }

    if (session && session?.user?.role !== Role.SUPER && session?.user?.role !== Role.ADMIN) {
        return (
          <Layout>
            <p>You need to be authenticated to see this page</p>
          </Layout>
        )
    }

    return (
      <>
        <Head>
          <title>Create T3 App</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Layout>
            <Form 
                schema={addEmployeeValidationSchema}
                onSubmit={handleSubmit}
                renderAfter={() => <button className="w-80 bg-neutral-700 p-2.5 rounded text-white hover:bg-stone-800 hover:scale-105 transition" >Submit</button>}
                props = {{
                    name: {
                        placeholder: "Name",
                    },
                    email: {
                        placeholder: "Email",
                    },
                    role: {
                        options: [Role.ADMIN, Role.USER, Role.SUPER]
                    }
                }}

            />
        </Layout>
            
        
      </>
    );
  };
  
  export default AddEmployee;
  