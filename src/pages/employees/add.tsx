import { Role } from "@prisma/client";
import type { NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { z } from "zod";
import Form from "../../components/Form/Form";
import Layout from "../../components/Layout";
import Title from "../../components/Title";
import { api } from "../../utils/api";


export const addEmployeeValidationSchema = z.object({
    name: z.string().min(2).max(20) ,
    email: z.string().email().max(30),
    role: z.enum([Role.ADMIN, Role.USER, Role.SUPER]),
    permissions: z.number().min(0).max(3).optional(),
})

const AddEmployee: NextPage = () => {

    const { data: session, status } = useSession();
    console.log(session, status)
    const mutation = api.users.createUser.useMutation()

    const handleSubmit = (data: z.infer<typeof addEmployeeValidationSchema> ) => {
        mutation.mutate(data)
        if (mutation.isSuccess) {
            console.log("Success!")
        }
        if (mutation.error) {
            console.log(mutation.error)
        }
    }

    if (status === "loading") {
        return <div>Loading...</div>
    }

    if (session?.user && session.user?.permissions < 2) {
        return (
          <Layout>
            <p>You need to be authenticated to see this page</p>
          </Layout>
        )
    }

    return (
      <>
        <Head>
          <title>Create T3 App</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Layout>
            
            <div className="grid m-6">
                <Title>Add a new employee</Title>
                <div className="w-96">
                    <Form 
                            schema={addEmployeeValidationSchema}
                            onSubmit={handleSubmit}
                            renderAfter={() => <button className="w-full mt-2 bg-neutral-700 p-2.5 rounded text-white hover:bg-stone-800 hover:scale-105 transition" >Submit</button>}
                            props = {{
                                name: {
                                    placeholder: "ex: John Smith",
                                    label: "Name",
                                },
                                email: {
                                    placeholder: "ex: jsmith@company.com",
                                    label: "Email",
                                },
                                role: {
                                    options: [Role.ADMIN, Role.USER],
                                    label: "Role",
                                },
                                permissions: {
                                    className: "hidden",
                                }
                            }}

                        />
                        {mutation.isError && <p className="text-red-500">{mutation.error?.message}</p>}
                        {mutation.isSuccess && <p className="text-green-500">Success!</p>}
                </div>  

            </div>
        </Layout>
            
        
      </>
    );
  };
  
  export default AddEmployee;
  